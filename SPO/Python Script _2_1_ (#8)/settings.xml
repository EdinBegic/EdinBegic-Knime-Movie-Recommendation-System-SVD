<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
<entry key="node_file" type="xstring" value="settings.xml"/>
<config key="flow_stack"/>
<config key="internal_node_subsettings">
<entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
</config>
<config key="model">
<entry key="sourceCode" type="xstring" value="import matplotlib.pyplot as plt%%00010import numpy as np%%00010import pandas as pd%%00010%%00010%%00010def avg(R):%%00010    mu = 0%%00010    cnt = 0%%00010    for x in R:%%00010        for y in x:%%00010            if y &gt; 0:%%00010                cnt = cnt + 1%%00010                mu += y%%00010    return mu / cnt%%00010%%00010%%00010def item_bias(R, D, U, mu):%%00010    bq = np.zeros([D])  # Movie bias%%00010    lambda1 = 25%%00010%%00010    for i in range(D):%%00010        Ri = 0%%00010        s = 0%%00010        for u in range(U):%%00010            if R[u][i] &gt; 0:%%00010                Ri = Ri + 1%%00010                s = s + R[u][i] - mu%%00010        bq[i] = s / (lambda1 + Ri)%%00010%%00010    return bq%%00010%%00010%%00010def user_bias(R, D, U, mu, bq):%%00010    bp = np.zeros([U])  # User bias%%00010    lambda2 = 10%%00010    for u in range(U):%%00010        Ru = 0%%00010        s = 0%%00010        for i in range(D):%%00010            if R[u][i] &gt; 0:%%00010                Ru = Ru + 1%%00010                s = s + R[u][i] - mu - bq[i]%%00010        bp[u] = s / (lambda2 + Ru)%%00010%%00010    return bp%%00010%%00010%%00010def get_bias(R, D, U):%%00010    mu = avg(R)%%00010%%00010    bq = item_bias(R, D, U, mu)%%00010    bp = user_bias(R, D, U, mu, bq)%%00010%%00010    B = np.zeros([U, D])%%00010    for i in range(0, U):%%00010        for j in range(0, D):%%00010            B[i][j] = mu + bq[j] + bp[i]%%00010    return B%%00010%%00010%%00010def get_biased_error(R, W, X, Y, B):%%00010    return np.sum((W * (R - B - np.dot(X, Y)) ** 2))%%00010%%00010%%00010def biased_als(R, W, K=30, steps=70, R_test=None, W_test=None, Y=None):%%00010    if (R_test is None) ^ (W_test is None):%%00010        raise ValueError('R_test and W_test have to be either None or not None')%%00010    elif R_test is not None:%%00010        W_test = W_test.astype(np.float64, copy=False)%%00010        R_test = R_test.astype(np.float64, copy=False)%%00010%%00010    fix_movies = False%%00010    U, D = R.shape%%00010%%00010    if Y is not None:%%00010        fix_movies = True%%00010        K, _ = Y.shape%%00010    else:%%00010        Y = 5 * np.random.rand(K, D).astype(np.float64, copy=False)%%00010%%00010    W = W.astype(np.float64, copy=False)%%00010    # W = np.vstack((np.ones(W.shape[1]), W))%%00010    # W = np.hstack((np.ones((W.shape[0], 1)), W))%%00010    R = R.astype(np.float64, copy=False)%%00010    X = 5 * np.random.rand(U, K).astype(np.float64, copy=False)%%00010    B = get_bias(R, D, U).astype(np.float64, copy=False)%%00010    error_log = []%%00010    error_test_log = []%%00010    _lambda = 0.05%%00010%%00010    R = R - B%%00010%%00010    beta = np.random.rand(U, 1)%%00010    gamma = np.random.rand(1, D)%%00010%%00010    err = np.inf%%00010    while steps &gt; 0 and err &gt; 0.002:%%00010        _X = np.hstack((np.ones((U, 1)), X))%%00010        _Y = np.vstack((gamma, Y))%%00010%%00010        for i in range(D):%%00010            _Y[:, i] = findY(K, R, W, _X, _lambda, i)%%00010%%00010        gamma = _Y[0]%%00010%%00010        _Y[0] = np.ones((1, Y.shape[1]))%%00010        _X[:, [0]] = beta%%00010%%00010        for u in range(U):%%00010            _X[u] = findX(K, R, W, _X, _Y, _lambda, u)%%00010%%00010        beta = _X[:, [0]]%%00010        X = _X[:, 1:]%%00010        Y = _Y[1:, :]%%00010%%00010        for i in range(0, U):%%00010            for j in range(0, D):%%00010                B[i][j] = gamma[j] + beta[i][0]%%00010        err = get_biased_error(R, W, X, Y, B)%%00010        error_log.append(err)%%00010        print('Error: {}'.format(err))%%00010        if R_test is not None:%%00010            err_test = get_biased_error(R_test, W_test, X, Y, B)%%00010            error_test_log.append(err_test)%%00010            print('Test Error: {}'.format(err_test))%%00010%%00010        steps = steps - 1%%00010%%00010    plt.plot(error_log)%%00010    if R_test is not None:%%00010        plt.plot(error_test_log, 'r')%%00010    plt.title('Learning RMSE')%%00010    plt.xlabel('Iteration count')%%00010    plt.ylabel('Error')%%00010    plt.show(block=False)%%00010    plt.pause(2)%%00010    plt.close('all')%%00010%%00010    return X, Y, B%%00010%%00010%%00010def findX(K, R, W, _X, _Y, _lambda, u):%%00010    Wu = np.diag(W[u])%%00010    return np.linalg.solve(np.dot(_Y, np.dot(Wu, _Y.T)) + _lambda * np.eye(K + 1),%%00010                           np.dot(_Y, np.dot(Wu, R[u].T))).T%%00010%%00010%%00010def findY(K, R, W, _X, _lambda, i):%%00010    Wi = np.diag(W.T[i])%%00010    return np.linalg.solve(np.dot(_X.T, np.dot(Wi, _X)) + _lambda * np.eye(K + 1),%%00010                           np.dot(_X.T, np.dot(Wi, R[:, i])))%%00010%%00010%%00010def main():%%00010    input_table_1.drop(columns=input_table_1.columns[0], axis=1, inplace=True)%%00010    input_table_2.drop(columns=input_table_2.columns[0], axis=1, inplace=True)%%00010%%00010    X, Y, B = biased_als(input_table_1.values, input_table_2.values)%%00010%%00010    output_table = pd.DataFrame(np.dot(X, Y) + B)%%00010    output_table.to_csv(&quot;C:/Users/Imtec/Desktop/SPO/data/predictions-test.csv&quot;)%%00010%%00010    return output_table%%00010%%00010main()%%00010    "/>
<entry key="rowLimit" type="xint" value="1000"/>
<entry key="pythonVersionOption" type="xstring" value="PYTHON3"/>
<entry key="convertMissingToPython" type="xboolean" value="false"/>
<entry key="convertMissingFromPython" type="xboolean" value="false"/>
<entry key="sentinelOption" type="xstring" value="MIN_VAL"/>
<entry key="sentinelValue" type="xint" value="0"/>
<entry key="chunkSize" type="xint" value="500000"/>
<entry key="python2Command" type="xstring" value=""/>
<entry key="python3Command" type="xstring" value=""/>
</config>
<config key="nodeAnnotation">
<entry key="text" type="xstring" value="SVD"/>
<entry key="bgcolor" type="xint" value="16777215"/>
<entry key="x-coordinate" type="xint" value="547"/>
<entry key="y-coordinate" type="xint" value="119"/>
<entry key="width" type="xint" value="106"/>
<entry key="height" type="xint" value="15"/>
<entry key="alignment" type="xstring" value="CENTER"/>
<entry key="borderSize" type="xint" value="0"/>
<entry key="borderColor" type="xint" value="16777215"/>
<entry key="defFontSize" type="xint" value="11"/>
<entry key="annotation-version" type="xint" value="20151123"/>
<config key="styles"/>
</config>
<entry key="customDescription" type="xstring" isnull="true" value=""/>
<entry key="state" type="xstring" value="IDLE"/>
<entry key="factory" type="xstring" value="org.knime.python2.nodes.script2in1out.Python2Script2In1OutNodeFactory"/>
<entry key="node-name" type="xstring" value="Python Script (2⇒1)"/>
<entry key="node-bundle-name" type="xstring" value="KNIME Python nodes"/>
<entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.python2.nodes"/>
<entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-bundle-version" type="xstring" value="3.7.2.v201904170931"/>
<entry key="node-feature-name" type="xstring" value="KNIME Python Integration"/>
<entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.python2.feature.group"/>
<entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-feature-version" type="xstring" value="3.7.2.v201904170931"/>
<config key="factory_settings"/>
<entry key="name" type="xstring" value="Python Script (2⇒1)"/>
<entry key="hasContent" type="xboolean" value="false"/>
<entry key="isInactive" type="xboolean" value="false"/>
<config key="ports">
<config key="port_1">
<entry key="index" type="xint" value="1"/>
<entry key="port_dir_location" type="xstring" isnull="true" value=""/>
</config>
</config>
<config key="filestores">
<entry key="file_store_location" type="xstring" isnull="true" value=""/>
<entry key="file_store_id" type="xstring" isnull="true" value=""/>
</config>
</config>
